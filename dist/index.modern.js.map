{"version":3,"file":"index.modern.js","sources":["../src/tools/Tools.js","../src/providers/ABCProvider.js","../src/interceptors/Interceptors.js"],"sourcesContent":["import URL from \"url-parse\";\n\nfunction mapUrls(url, urlMappings) {\n    if (urlMappings[url]) {\n        return urlMappings[url];\n    }\n    return url;\n}\n\nfunction addQuarantineSegmentToUrl(originalUrl, quarantineSegment = \"\") {\n    if (quarantineSegment === \"\") return originalUrl;\n\n    // Parse the original URL\n    const url = new URL(originalUrl);\n\n    // Insert the quarantine segment after the domain in the pathname\n    url.pathname = `/${quarantineSegment}${url?.pathname}`;\n    console.log(\"[addQuarantineSegmentToUrl]\", url);\n    // Get the modified URL\n    const modifiedUrl = url.toString();\n\n    return modifiedUrl;\n}\n\nfunction mergeHeaders(originalHeaders = {}, newHeaders = {}) {\n    // Get the modified headers\n    const modifiedHeaders = merge(originalHeaders, newHeaders);\n    console.log(modifiedHeaders, \"[mergeHeaders]\");\n\n    return modifiedHeaders;\n}\n\nfunction groupByPrefixAndStructure(data) {\n    let grouped = {};\n\n    for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n            const parts = key.split(\"-\");\n            const prefix = parts[0];\n            const valueObject = data[key];\n\n            if (!grouped[prefix]) {\n                grouped[prefix] = {};\n            }\n\n            if (prefix === \"api\") {\n                const defaultValue = valueObject.defaultValue;\n                const result = valueObject.result;\n                grouped[prefix][defaultValue] = result; // Use \"defaultValue\" as key and \"result\" as value for \"api\" prefix\n            } else if (prefix === \"response\") {\n                // const defaultValue = valueObject.defaultValue.url;\n                const result = valueObject.result;\n                // grouped[prefix][defaultValue] = result;\n\n                grouped[prefix] = {\n                    ...grouped[prefix],\n                    ...result,\n                };\n            } else if (prefix === \"context\") {\n                const keyWithoutPrefix = parts.slice(1).join(\"-\"); // Remove the prefix\n                const result = valueObject.result;\n                console.log(keyWithoutPrefix, result, \"contexttttttt\");\n\n                //   grouped[prefix][keyWithoutPrefix] = result; // Remove prefix and use \"result\" as value for other prefixes\n                grouped = {\n                    ...grouped,\n                    ...result,\n                };\n                // grouped[prefix] = {\n                //     ...grouped[prefix],\n                //     ...result\n                // }; // Remove prefix and use \"result\" as value for other prefixes\n            }\n        }\n    }\n\n    console.log(grouped, \"yyyyyyyyyyyyyyyyyyyy\");\n    return grouped;\n}\n\nexport {\n    mergeHeaders,\n    addQuarantineSegmentToUrl,\n    groupByPrefixAndStructure,\n    mapUrls\n}","import React, {\n    useEffect, useState,\n    useMemo,\n    useCallback, Children, cloneElement\n  } from \"react\";\n  \nimport {\n    GrowthBook,\n    GrowthBookProvider,\n    useFeatureValue,\n    useFeatureIsOn,\n    useFeature,\n    useGrowthBook,\n  } from \"@growthbook/growthbook-react\";\n\n  import {\n    groupByPrefixAndStructure\n  } from \"../tools\"\n  // Function to group objects based on prefix and structure  \n  \n  const ABCProvider = ({ children, getModel, updateModel, model }) => {\n    const {\n      misc: { \n        iamABCTester, \n        abcScope, \n        abcEndpoint,\n        abcEnable,\n        abcSdk,\n        abcTimeout = 30000\n     },\n    } = getModel([\"misc\"]);\n  \n    console.log(iamABCTester, abcScope, abcSdk, \"[ABCProvider] iamABCTester\", abcEnable);\n  \n    const [isReady, setIsReady] = useState(false);\n  \n    const arrayChildren = Children.toArray(children);\n  \n    const gb = useMemo(\n      () => {\n        if (iamABCTester) {\n          console.log(iamABCTester, \"iamABCTesteriamABCTester useMemo\");\n          const gb = new GrowthBook({\n            apiHost: abcEndpoint, //\"https://growthbook-api-dev.maybanksandbox.com/\",\n            clientKey: abcSdk, //\"sdk-cAC7AQGd1GAEedY\",\n            // Enable easier debugging during development\n            // enableDevMode: true,\n            // Update the instance in realtime as features change in GrowthBook\n            // subscribeToChanges: true,\n            // Only required for A/B testing\n            // Called every time a user is put into an experiment\n            // trackingCallback: (experiment, result) => {\n            //   console.log(\"Experiment Viewed\", {\n            //     experimentId: experiment.key,\n            //     variationId: result.key,\n            //   });\n            // },\n            // onFeatureUsage: (featureKey, result) => {\n            //   console.log(\"feature\", featureKey, \"has value\", result.value);\n            // },\n          });\n          return gb;\n        }\n      },\n      [abcEndpoint, iamABCTester]\n    );\n  \n    useEffect(() => {\n      if (iamABCTester && model.misc.abcEnable) {\n        gb.loadFeatures({\n            timeout: abcTimeout,\n        }).then(() => {\n          setIsReady(true);\n        });\n      }\n    }, [model.misc.abcEnable, model.misc.iamABCTester]);\n  \n    const evaluateFeatures = () => {\n      if (iamABCTester && model.misc.abcEnable) {\n        allFeatures = gb.getFeatures();\n        console.log(iamABCTester, \"evaluateFeatures gbs\", allFeatures);\n  \n        let done = {};\n        Object.keys(allFeatures).map((key) => {\n          console.log(key, \"inside itemmmmmmmz ;) ->>>>>\", allFeatures[key]);\n          const result = gb.getFeatureValue(key, allFeatures[key].defaultValue);\n          done[key] = {\n            defaultValue: allFeatures[key].defaultValue,\n            result,\n          };\n          console.log(key, result, \"inside <<<<<<------ result\");\n        });\n  \n        console.log(done, \"done itemmmmmmmz ;) result\");\n  \n        // Call the function to group by prefix\n        groupedData = groupByPrefixAndStructure(done);\n  \n        console.log(\"sssssssss group abc abc yasser\", groupedData);\n  \n        updateModel({ ...groupedData });\n      }\n    };\n  \n    useEffect(() => {\n      if (!isReady) {\n        return;\n      }\n  \n    //   gb.setAttributes({\n    //     did: \"scope\",\n    //   });\n  \n      evaluateFeatures();\n      console.log(\"evaluateFeatures\");\n    }, [isReady, model.misc.iamABCTester]);\n  \n    console.log(\"NavigationContainer mounted\", iamABCTester);\n  \n    const renderChild  = () => {\n        return Children.map(arrayChildren, (child, index) => {\n            console.log(index, \"44444444444444\");\n            return cloneElement(child, {});\n          })\n    }\n\n    return (\n        // !model.misc.abcEnable && renderChild() ||\n      <GrowthBookProvider growthbook={gb}>\n        {Children.map(arrayChildren, (child, index) => {\n          console.log(index, \"44444444444444\");\n          return cloneElement(child, {});\n        })}\n      </GrowthBookProvider>\n    );\n  };\n  \n  export default ABCProvider;\n  \n  // import styles from './styles.module.css'\n  \n  // // export const ExampleComponent = ({ text }) => {\n  // //   return <div className={styles.test}>    yasser ;) Component: {text}</div>\n  // // }\n  \n  // import React,\n  // {\n  //   useEffect,\n  //   useState,\n  //   useCallback,\n  //   Children, \n  //   cloneElement\n  // } from 'react';\n  // import {\n  //   GrowthBook,\n  //   GrowthBookProvider,\n  //   useFeatureValue,\n  //   useFeatureIsOn,\n  //   useFeature,\n  //   useGrowthBook,\n  // } from \"@growthbook/growthbook-react\";\n  // // import CustomABC from \"./CustomABC\";\n  \n  // // Create a GrowthBook instance\n  // const gb = new GrowthBook({\n  //   apiHost: \"https://growthbook-api-dev.maybanksandbox.com\",\n  //   clientKey: \"sdk-cAC7AQGd1GAEedY\",\n  //   // Enable easier debugging during development\n  //   enableDevMode: true,\n  //   // Update the instance in realtime as features change in GrowthBook\n  //   subscribeToChanges: true,\n  //   // Only required for A/B testing\n  //   // Called every time a user is put into an experiment\n  //   trackingCallback: (experiment, result) => {\n  //     console.log(\"Experiment Viewed\", {\n  //       experimentId: experiment.key,\n  //       variationId: result.key,\n  //     });\n  //   },\n  //   onFeatureUsage: (featureKey, result) => {\n  //     console.log(\"feature\", featureKey, \"has value\", result.value);\n  //   },\n  // });\n  \n  // // Function to group objects based on prefix and structure\n  // function groupByPrefixAndStructure(data) {\n  //   let grouped = {};\n  \n  //   for (const key in data) {\n  //     if (data.hasOwnProperty(key)) {\n  //       const parts = key.split(\"-\");\n  //       const prefix = parts[0];\n  //       const valueObject = data[key];\n  \n  //       if (!grouped[prefix]) {\n  //         grouped[prefix] = {};\n  //       }\n  \n  //       // switch (prefix) {\n  //       //     case \"api\":\n  //       //         const defaultValue = valueObject.defaultValue;\n  //       //         // const result = valueObject.result;\n  //       //         grouped[prefix][defaultValue] = valueObject.result;\n  //       //         break;\n  //       //     case \"response\":\n  //       //         // const result = valueObject.result;\n  //       //         // grouped[prefix][defaultValue] = result;\n  \n  //       //         grouped[prefix] = {\n  //       //             ...grouped[prefix],\n  //       //             ...valueObject.result,\n  //       //         };\n  //       //         break;\n  \n  //       //     case \"context\":\n  //       //         const keyWithoutPrefix = parts.slice(1).join(\"-\"); // Remove the prefix\n  //       //         // const result = valueObject.result;\n  //       //         //   grouped[prefix][keyWithoutPrefix] = result; // Remove prefix and use \"result\" as value for other prefixes\n  //       //         grouped = {\n  //       //             ...grouped,\n  //       //             ...valueObject.result,\n  //       //         };\n  //       //         break;\n  \n  //       //     case \"quarantine\":\n  //       //         console.log(valueObject,\"valueObject quarantine\", valueObject.result)\n  //       //         grouped = {\n  //       //             ...grouped,\n  //       //             quarantine: \"yasser\"//valueObject.result && \"true\" || \"false\",\n  //       //         };\n  \n  //       //         break;\n  //       // }\n  \n  //       if (prefix === \"api\") {\n  //         const defaultValue = valueObject.defaultValue;\n  //         const result = valueObject.result;\n  //         grouped[prefix][defaultValue] = result; // Use \"defaultValue\" as key and \"result\" as value for \"api\" prefix\n  //       } else if (prefix === \"response\") {\n  //         // const defaultValue = valueObject.defaultValue.url;\n  //         const result = valueObject.result;\n  //         // grouped[prefix][defaultValue] = result;\n  \n  //         grouped[prefix] = {\n  //           ...grouped[prefix],\n  //           ...result,\n  //         };\n  //       } else if (prefix === \"context\") {\n  //         const keyWithoutPrefix = parts.slice(1).join(\"-\"); // Remove the prefix\n  //         const result = valueObject.result;\n  //         console.log(keyWithoutPrefix, result, \"contexttttttt\");\n  \n  //         //   grouped[prefix][keyWithoutPrefix] = result; // Remove prefix and use \"result\" as value for other prefixes\n  //         grouped = {\n  //           ...grouped,\n  //           ...result,\n  //         };\n  //         // grouped[prefix] = {\n  //         //     ...grouped[prefix],\n  //         //     ...result\n  //         // }; // Remove prefix and use \"result\" as value for other prefixes\n  //       }\n  //     }\n  //   }\n  \n  //   console.log(grouped, \"yyyyyyyyyyyyy43424sss3yyyyyyy\");\n  //   return grouped;\n  // }\n  \n  // const ABCProvider = ({ children, getModel, updateModel, model }) => {\n  \n  //   const {\n  //     misc: {\n  //       iamABCTester,\n  //     }\n  //   } = getModel([\n  //     \"misc\"\n  //   ]);\n  \n  //   let allFeatures = {};\n  //   let groupedData = {};\n  \n  //   console.log(iamABCTester,\"iamABCTesteriamABCTester\")\n  \n  //   const [isReady, setIsReady] = useState(false);\n  \n  //   const arrayChildren = Children.toArray(children);\n  \n  //   useEffect(() => {\n  //     if(iamABCTester){\n  //       gb.loadFeatures().then(response => {\n  //         console.log('yasssereeeeee', response);\n  //         setIsReady(true);\n  //       })\n  //     }\n     \n  //     // Load feature definitions from GrowthBook API\n  //     // fetch(\n  //     //   'https://growthbook-api-dev.maybanksandbox.com/api/features/sdk-cAC7AQGd1GAEedY',\n  //     // ).then(response => response.json())\n  //     //   .then(data => {\n  //     //     console.log('yassser', data)\n  //     //     gb.setFeatures(data.features);\n  //     //     updateLoaded(data.features)\n  //     //   })\n  //     //   .catch(error => console.error(error,'errrrorrororor'))\n  //     //   .finally(() => {\n  //     //     setIsReady(true);\n  //     //   });\n  //   }, [model.misc]);\n      \n  //   const evaluateFeatures = () => {\n  //     allFeatures = gb.getFeatures();\n  \n  //     console.log(iamABCTester,'evaluateFeatures gbs', allFeatures);\n  \n  //     if (iamABCTester) {\n  //       // const growthbook = useGrowthBook();\n  \n  //       // allFeatures = gb.getFeatures();\n  //       console.log(allFeatures, \"evaluateFeatures gbs xyz\");\n  \n  //       let done = {};\n  //       Object.keys(allFeatures).map((key) => {\n  //         console.log(key, \"inside itemmmmmmmz ;) ->>>>>\",allFeatures[key]);\n  //         const result = gb.getFeatureValue(key, allFeatures[key].defaultValue);\n  //         done[key] = {\n  //           defaultValue: allFeatures[key].defaultValue,\n  //           result,\n  //         };\n  //         console.log(key, result, \"inside <<<<<<------ result\");\n  //       });\n  \n  //       console.log(done, \"done itemmmmmmmz ;) result\");\n  \n  //       // Call the function to group by prefix\n  //       groupedData = groupByPrefixAndStructure(done);\n  \n  //       console.log(\"sssssssss group abc abc yasser\", groupedData);\n  //       updateModel({...groupedData})\n  //     }\n  //   };\n  \n  //   useEffect(() => {\n  //     if (!isReady) {\n  //       return;\n  //     }\n  \n  //     gb.setAttributes({\n  //       did: \"yasser\",\n  //     });\n  \n  //     evaluateFeatures();\n  //     console.log('evaluateFeatures');\n  //   }, [isReady, model.misc]);\n  \n  //   console.log('NavigationContainer mounted', iamABCTester);\n  \n  //   return (\n  //     <GrowthBookProvider growthbook={gb}>\n  //       {\n  //         Children.map(arrayChildren, (child, index) => {\n  //           console.log(index,'444444444444443')\n  //           return cloneElement(child, {\n  //             // isReady,\n  //           })\n  //         })\n  //       }\n  //     </GrowthBookProvider>\n  //   );\n  // };\n  \n  // export default ABCProvider;","import { get, merge } from \"lodash\";\n\nimport {\n    mergeHeaders,\n    addQuarantineSegmentToUrl,\n    mapUrls\n} from \"../tools\"\n\nfunction responseInterceptor({ getModel, response }) {\n    // Modify the response data here mapUrls\n    // const { getModel } = ApiManager.context.controller;\n    try {\n        const dictionary = getModel([\"response\"])?.response || {};\n        const responseUrl = response.config.url;\n\n        response = merge(response, mapUrls(responseUrl, dictionary));\n        console.log(\"[responseInterceptor] Request URL:\", responseUrl);\n        console.log(\"[responseInterceptor] context\", getModel([\"response\"])?.response);\n        console.log(\"[responseInterceptor] data\", response?.data);\n        return response;\n    } catch(error) {\n        console.log('[responseInterceptor]', error)\n        return response\n    }\n}\nfunction requestInterceptor({ getModel, request }) {\n    // Modify the response data here mapUrls\n    try {\n        const dictionary = getModel([\"api\"])?.api || {};\n        const requests = getModel(\"requests\") || {\n            //to check whether \n            //requires merging the header for request or not\n            enabled: false,\n            headers: {},\n            //the prefix to be merged with endpoint path\n            //example: www.domain.com/prefix/api/example\n            prefix: \"\",\n        };\n\n        //to replace the url with alternative from abc\n        request.url = mapUrls(request.url, dictionary);\n        if (requests.enabled) {\n            //merge prefix with url\n            request.url = addQuarantineSegmentToUrl(request.url, requests.prefix);\n            //merge existing header with new one\n            // request.headers = mergeHeaders(request.headers, {\n            //     ...requests?.headers,\n            // });\n        }\n        console.log(\n            requests,\n            request?.headers,\n            requests?.enabled,\n            request?.url,\n            \"[requestInterceptor] details\"\n        );\n        return request;\n    } catch(error) {\n        console.log('[requestInterceptor] error:',error)\n        return request\n    }\n}\n\nexport {\n    requestInterceptor,\n    responseInterceptor\n}"],"names":["mapUrls","url","urlMappings","ABCProvider","_ref","children","updateModel","model","_getModel$misc","getModel","misc","iamABCTester","abcEndpoint","abcSdk","_getModel$misc$abcTim","abcTimeout","console","log","abcScope","abcEnable","_useState","useState","isReady","setIsReady","arrayChildren","Children","toArray","gb","useMemo","GrowthBook","apiHost","clientKey","useEffect","loadFeatures","timeout","then","allFeatures","getFeatures","done","Object","keys","map","key","result","getFeatureValue","defaultValue","groupedData","data","grouped","hasOwnProperty","parts","split","prefix","valueObject","_extends","keyWithoutPrefix","slice","join","groupByPrefixAndStructure","evaluateFeatures","h","GrowthBookProvider","growthbook","child","index","cloneElement","responseInterceptor","response","_getModel","_getModel2","_response","dictionary","responseUrl","config","merge","error","requestInterceptor","_ref2","request","_getModel3","api","requests","enabled","headers","originalUrl","quarantineSegment","URL","pathname","toString","addQuarantineSegmentToUrl"],"mappings":"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"}